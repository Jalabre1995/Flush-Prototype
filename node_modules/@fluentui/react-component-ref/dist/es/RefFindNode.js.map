{"version":3,"sources":["RefFindNode.tsx"],"names":["React","ReactDOM","handleRef","RefFindNode","prevNode","componentDidMount","findDOMNode","props","innerRef","componentDidUpdate","prevProps","currentNode","componentWillUnmount","render","children","Component"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AAEA,SAASC,SAAT,QAAoC,SAApC;AAEA,WAAaC,WAAb;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACEC,QADF,GAC0B,IAD1B;AAAA;AAAA;;AAAA;;AAAA,SAGEC,iBAHF,GAGE,6BAAoB;AAClB,SAAKD,QAAL,GAAgBH,QAAQ,CAACK,WAAT,CAAqB,IAArB,CAAhB;AAEAJ,IAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsB,KAAKJ,QAA3B,CAAT;AACD,GAPH;;AAAA,SASEK,kBATF,GASE,4BAAmBC,SAAnB,EAAwC;AACtC,QAAMC,WAAW,GAAGV,QAAQ,CAACK,WAAT,CAAqB,IAArB,CAApB;;AAEA,QAAI,KAAKF,QAAL,KAAkBO,WAAtB,EAAmC;AACjC,WAAKP,QAAL,GAAgBO,WAAhB;AACAT,MAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsBG,WAAtB,CAAT;AACD;;AAED,QAAID,SAAS,CAACF,QAAV,KAAuB,KAAKD,KAAL,CAAWC,QAAtC,EAAgD;AAC9CN,MAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsBG,WAAtB,CAAT;AACD;AACF,GApBH;;AAAA,SAsBEC,oBAtBF,GAsBE,gCAAuB;AACrBV,IAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsB,IAAtB,CAAT;AAEA,WAAO,KAAKJ,QAAZ;AACD,GA1BH;;AAAA,SA4BES,MA5BF,GA4BE,kBAAS;AAAA,QACCC,QADD,GACc,KAAKP,KADnB,CACCO,QADD;AAGP,WAAOA,QAAP;AACD,GAhCH;;AAAA;AAAA,EAAiCd,KAAK,CAACe,SAAvC","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n\n    handleRef(this.props.innerRef, this.prevNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    const currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"],"file":"RefFindNode.js"}