{"ast":null,"code":"import * as React from 'react';\nexport function isDisabled(dataNode, skipType) {\n  if (!dataNode) {\n    return true;\n  }\n\n  var _dataNode$data = dataNode.data,\n      disabled = _dataNode$data.disabled,\n      disableCheckbox = _dataNode$data.disableCheckbox;\n\n  switch (skipType) {\n    case 'select':\n      return disabled;\n\n    case 'checkbox':\n      return disabled || disableCheckbox;\n  }\n\n  return false;\n}\nexport default function useKeyValueMapping(cacheKeyMap, cacheValueMap) {\n  var getEntityByKey = React.useCallback(function (key) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'select';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheKeyMap.get(key);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheKeyMap]);\n  var getEntityByValue = React.useCallback(function (value) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'select';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheValueMap.get(value);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheValueMap]);\n  return [getEntityByKey, getEntityByValue];\n}","map":null,"metadata":{},"sourceType":"module"}