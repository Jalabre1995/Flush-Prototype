{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint react/no-is-mounted:0,react/sort-comp:0,react/prop-types:0 */\n\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport defaultRequest from './request';\nimport getUid from './uid';\nimport attrAccept from './attr-accept';\nimport traverseFileTree from './traverseFileTree';\n\nvar dataOrAriaAttributeProps = function dataOrAriaAttributeProps(props) {\n  return Object.keys(props).reduce(function (acc, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') {\n      acc[key] = props[key];\n    }\n\n    return acc;\n  }, {});\n};\n\nvar AjaxUploader = function (_Component) {\n  _inherits(AjaxUploader, _Component);\n\n  function AjaxUploader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AjaxUploader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AjaxUploader.__proto__ || Object.getPrototypeOf(AjaxUploader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      uid: getUid()\n    }, _this.reqs = {}, _this.onChange = function (e) {\n      var files = e.target.files;\n\n      _this.uploadFiles(files);\n\n      _this.reset();\n    }, _this.onClick = function (e) {\n      var el = _this.fileInput;\n\n      if (!el) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          onClick = _this$props.onClick;\n\n      if (children && children.type === 'button') {\n        el.parentNode.focus();\n        el.parentNode.querySelector('button').blur();\n      }\n\n      el.click();\n\n      if (onClick) {\n        onClick(e);\n      }\n    }, _this.onKeyDown = function (e) {\n      if (e.key === 'Enter') {\n        _this.onClick();\n      }\n    }, _this.onFileDrop = function (e) {\n      var multiple = _this.props.multiple;\n      e.preventDefault();\n\n      if (e.type === 'dragover') {\n        return;\n      }\n\n      if (_this.props.directory) {\n        traverseFileTree(Array.prototype.slice.call(e.dataTransfer.items), _this.uploadFiles, function (_file) {\n          return attrAccept(_file, _this.props.accept);\n        });\n      } else {\n        var files = Array.prototype.slice.call(e.dataTransfer.files).filter(function (file) {\n          return attrAccept(file, _this.props.accept);\n        });\n\n        if (multiple === false) {\n          files = files.slice(0, 1);\n        }\n\n        _this.uploadFiles(files);\n      }\n    }, _this.uploadFiles = function (files) {\n      var postFiles = Array.prototype.slice.call(files);\n      postFiles.map(function (file) {\n        file.uid = getUid();\n        return file;\n      }).forEach(function (file) {\n        _this.upload(file, postFiles);\n      });\n    }, _this.saveFileInput = function (node) {\n      _this.fileInput = node;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(AjaxUploader, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      this.abort();\n    }\n  }, {\n    key: 'upload',\n    value: function upload(file, fileList) {\n      var _this2 = this;\n\n      var props = this.props;\n\n      if (!props.beforeUpload) {\n        // always async in case use react state to keep fileList\n        return setTimeout(function () {\n          return _this2.post(file);\n        }, 0);\n      }\n\n      var before = props.beforeUpload(file, fileList);\n\n      if (before && before.then) {\n        before.then(function (processedFile) {\n          var processedFileType = Object.prototype.toString.call(processedFile);\n\n          if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {\n            return _this2.post(processedFile);\n          }\n\n          return _this2.post(file);\n        })['catch'](function (e) {\n          // eslint-disable-next-line no-console\n          console.log(e);\n        });\n      } else if (before !== false) {\n        setTimeout(function () {\n          return _this2.post(file);\n        }, 0);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: 'post',\n    value: function post(file) {\n      var _this3 = this;\n\n      if (!this._isMounted) {\n        return;\n      }\n\n      var props = this.props;\n      var onStart = props.onStart,\n          onProgress = props.onProgress,\n          _props$transformFile = props.transformFile,\n          transformFile = _props$transformFile === undefined ? function (originFile) {\n        return originFile;\n      } : _props$transformFile;\n      new Promise(function (resolve) {\n        var action = props.action;\n\n        if (typeof action === 'function') {\n          action = action(file);\n        }\n\n        return resolve(action);\n      }).then(function (action) {\n        var uid = file.uid;\n        var request = props.customRequest || defaultRequest;\n        var transform = Promise.resolve(transformFile(file)).then(function (transformedFile) {\n          var data = props.data;\n\n          if (typeof data === 'function') {\n            data = data(transformedFile);\n          }\n\n          return Promise.all([transformedFile, data]);\n        })['catch'](function (e) {\n          console.error(e); // eslint-disable-line no-console\n        });\n        transform.then(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              transformedFile = _ref3[0],\n              data = _ref3[1];\n\n          var requestOption = {\n            action: action,\n            filename: props.name,\n            data: data,\n            file: transformedFile,\n            headers: props.headers,\n            withCredentials: props.withCredentials,\n            method: props.method || 'post',\n            onProgress: onProgress ? function (e) {\n              onProgress(e, file);\n            } : null,\n            onSuccess: function onSuccess(ret, xhr) {\n              delete _this3.reqs[uid];\n              props.onSuccess(ret, file, xhr);\n            },\n            onError: function onError(err, ret) {\n              delete _this3.reqs[uid];\n              props.onError(err, ret, file);\n            }\n          };\n          onStart(file);\n          _this3.reqs[uid] = request(requestOption);\n        });\n      });\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.setState({\n        uid: getUid()\n      });\n    }\n  }, {\n    key: 'abort',\n    value: function abort(file) {\n      var reqs = this.reqs;\n\n      if (file) {\n        var uid = file;\n\n        if (file && file.uid) {\n          uid = file.uid;\n        }\n\n        if (reqs[uid] && reqs[uid].abort) {\n          reqs[uid].abort();\n        }\n\n        delete reqs[uid];\n      } else {\n        Object.keys(reqs).forEach(function (uid) {\n          if (reqs[uid] && reqs[uid].abort) {\n            reqs[uid].abort();\n          }\n\n          delete reqs[uid];\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          Tag = _props.component,\n          prefixCls = _props.prefixCls,\n          className = _props.className,\n          disabled = _props.disabled,\n          id = _props.id,\n          style = _props.style,\n          multiple = _props.multiple,\n          accept = _props.accept,\n          children = _props.children,\n          directory = _props.directory,\n          openFileDialogOnClick = _props.openFileDialogOnClick,\n          onMouseEnter = _props.onMouseEnter,\n          onMouseLeave = _props.onMouseLeave,\n          otherProps = _objectWithoutProperties(_props, ['component', 'prefixCls', 'className', 'disabled', 'id', 'style', 'multiple', 'accept', 'children', 'directory', 'openFileDialogOnClick', 'onMouseEnter', 'onMouseLeave']);\n\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, className, className), _classNames));\n      var events = disabled ? {} : {\n        onClick: openFileDialogOnClick ? this.onClick : function () {},\n        onKeyDown: openFileDialogOnClick ? this.onKeyDown : function () {},\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave,\n        onDrop: this.onFileDrop,\n        onDragOver: this.onFileDrop,\n        tabIndex: '0'\n      };\n      return React.createElement(Tag, _extends({}, events, {\n        className: cls,\n        role: 'button',\n        style: style\n      }), React.createElement('input', _extends({}, dataOrAriaAttributeProps(otherProps), {\n        id: id,\n        type: 'file',\n        ref: this.saveFileInput,\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        } // https://github.com/ant-design/ant-design/issues/19948\n        ,\n        key: this.state.uid,\n        style: {\n          display: 'none'\n        },\n        accept: accept,\n        directory: directory ? 'directory' : null,\n        webkitdirectory: directory ? 'webkitdirectory' : null,\n        multiple: multiple,\n        onChange: this.onChange\n      })), children);\n    }\n  }]);\n\n  return AjaxUploader;\n}(Component);\n\nexport default AjaxUploader;","map":null,"metadata":{},"sourceType":"module"}