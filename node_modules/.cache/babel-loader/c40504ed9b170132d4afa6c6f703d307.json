{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _invoke from \"lodash/invoke\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { eventStack, getElementType, getUnhandledProps, isBrowser } from '../../lib';\nimport isVisible from './lib/isVisible';\n/**\n * Responsive can control visibility of content.\n *\n * @deprecated This component is deprecated and will be removed in next major release.\n */\n\nvar Responsive = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Responsive, _Component);\n\n  function Responsive() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      visible: true\n    };\n\n    _this.handleResize = function (e) {\n      if (_this.ticking) return;\n      _this.ticking = true;\n      _this.frameId = requestAnimationFrame(function () {\n        return _this.handleUpdate(e);\n      });\n    };\n\n    _this.handleUpdate = function (e) {\n      _this.ticking = false;\n      var visible = _this.state.visible;\n\n      var width = _invoke(_this.props, 'getWidth');\n\n      var nextVisible = isVisible(width, _this.props);\n      if (visible !== nextVisible) _this.setState({\n        visible: nextVisible\n      });\n\n      _invoke(_this.props, 'onUpdate', e, _extends({}, _this.props, {\n        width: width\n      }));\n    };\n\n    return _this;\n  }\n\n  Responsive.getDerivedStateFromProps = function getDerivedStateFromProps(props) {\n    var width = _invoke(props, 'getWidth');\n\n    var visible = isVisible(width, props);\n    return {\n      visible: visible\n    };\n  };\n\n  var _proto = Responsive.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var fireOnMount = this.props.fireOnMount;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Responsive.__deprecationWarningWasRaised) {\n        Responsive.__deprecationWarningWasRaised = true; // eslint-disable-next-line no-console\n\n        console.warn('Warning: \"Responsive\" component from Semantic UI React is deprecated and will be removed in the next major release. Please follow our upgrade guide: https://github.com/Semantic-Org/Semantic-UI-React/pull/4008');\n      }\n    }\n\n    eventStack.sub('resize', this.handleResize, {\n      target: 'window'\n    });\n    if (fireOnMount) this.handleUpdate();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    eventStack.unsub('resize', this.handleResize, {\n      target: 'window'\n    });\n    cancelAnimationFrame(this.frameId);\n  } // ----------------------------------------\n  // Event handlers\n  // ----------------------------------------\n  ; // ----------------------------------------\n  // Render\n  // ----------------------------------------\n\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    var visible = this.state.visible;\n    var ElementType = getElementType(Responsive, this.props);\n    var rest = getUnhandledProps(Responsive, this.props);\n    if (visible) return /*#__PURE__*/React.createElement(ElementType, rest, children);\n    return null;\n  };\n\n  return Responsive;\n}(Component);\n\nResponsive.handledProps = [\"as\", \"children\", \"fireOnMount\", \"getWidth\", \"maxWidth\", \"minWidth\", \"onUpdate\"];\nexport { Responsive as default };\nResponsive.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Fires callbacks immediately after mount. */\n  fireOnMount: PropTypes.bool,\n\n  /**\n   * Called to get width of screen. Defaults to using `window.innerWidth` when in a browser;\n   * otherwise, assumes a width of 0.\n   */\n  getWidth: PropTypes.func,\n\n  /** The maximum width at which content will be displayed. */\n  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** The minimum width at which content will be displayed. */\n  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Called on update.\n   *\n   * @param {SyntheticEvent} event - The React SyntheticEvent object\n   * @param {object} data - All props and the event value.\n   */\n  onUpdate: PropTypes.func\n} : {};\nResponsive.defaultProps = {\n  getWidth: function getWidth() {\n    return isBrowser() ? window.innerWidth : 0;\n  }\n};\nResponsive.onlyMobile = {\n  minWidth: 320,\n  maxWidth: 767\n};\nResponsive.onlyTablet = {\n  minWidth: 768,\n  maxWidth: 991\n};\nResponsive.onlyComputer = {\n  minWidth: 992\n};\nResponsive.onlyLargeScreen = {\n  minWidth: 1200,\n  maxWidth: 1919\n};\nResponsive.onlyWidescreen = {\n  minWidth: 1920\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Responsive.__deprecationWarningWasRaised = false;\n}","map":null,"metadata":{},"sourceType":"module"}