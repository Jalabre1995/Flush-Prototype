{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\n/* eslint-disable no-param-reassign */\n\nimport React, { Component } from 'react';\nimport raf from 'raf';\nimport Align from 'rc-align';\nimport { composeRef } from \"rc-util/es/ref\";\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport PopupInner from './PopupInner';\nimport { getMotion } from './utils/legacyUtil';\n\nfunction supportMotion(motion) {\n  return motion && motion.motionName;\n}\n\nvar Popup = /*#__PURE__*/function (_Component) {\n  _inherits(Popup, _Component);\n\n  var _super = _createSuper(Popup);\n\n  function Popup() {\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      targetWidth: undefined,\n      targetHeight: undefined,\n      status: null,\n      prevVisible: null,\n      alignClassName: null,\n      inMotion: false\n    };\n    _this.popupRef = React.createRef();\n    _this.alignRef = React.createRef();\n    _this.nextFrameState = null;\n    _this.nextFrameId = null;\n\n    _this.onAlign = function (popupDomNode, align) {\n      var status = _this.state.status;\n      var _this$props = _this.props,\n          getClassNameFromAlign = _this$props.getClassNameFromAlign,\n          onAlign = _this$props.onAlign;\n      var alignClassName = getClassNameFromAlign(align);\n\n      if (status === 'align') {\n        _this.setState({\n          alignClassName: alignClassName,\n          status: 'aligned'\n        }, function () {\n          _this.alignRef.current.forceAlign();\n        });\n      } else if (status === 'aligned') {\n        _this.setState({\n          alignClassName: alignClassName,\n          status: 'afterAlign'\n        });\n\n        onAlign(popupDomNode, align);\n      } else {\n        _this.setState({\n          alignClassName: alignClassName\n        });\n      }\n    };\n\n    _this.onMotionEnd = function () {\n      var visible = _this.props.visible;\n\n      _this.setState({\n        status: visible ? 'AfterMotion' : 'stable',\n        inMotion: false\n      });\n    };\n\n    _this.setStateOnNextFrame = function (state) {\n      _this.cancelFrameState();\n\n      _this.nextFrameState = _objectSpread(_objectSpread({}, _this.nextFrameState), state);\n      _this.nextFrameId = raf(function () {\n        var submitState = _objectSpread({}, _this.nextFrameState);\n\n        _this.nextFrameState = null;\n\n        _this.setState(submitState);\n      });\n    };\n\n    _this.getMotion = function () {\n      return _objectSpread({}, getMotion(_this.props));\n    }; // `target` on `rc-align` can accept as a function to get the bind element or a point.\n    // ref: https://www.npmjs.com/package/rc-align\n\n\n    _this.getAlignTarget = function () {\n      var _this$props2 = _this.props,\n          point = _this$props2.point,\n          getRootDomNode = _this$props2.getRootDomNode;\n\n      if (point) {\n        return point;\n      }\n\n      return getRootDomNode;\n    };\n\n    _this.cancelFrameState = function () {\n      raf.cancel(_this.nextFrameId);\n    };\n\n    _this.renderPopupElement = function () {\n      var _this$state = _this.state,\n          status = _this$state.status,\n          targetHeight = _this$state.targetHeight,\n          targetWidth = _this$state.targetWidth,\n          alignClassName = _this$state.alignClassName;\n      var _this$props3 = _this.props,\n          prefixCls = _this$props3.prefixCls,\n          className = _this$props3.className,\n          style = _this$props3.style,\n          stretch = _this$props3.stretch,\n          visible = _this$props3.visible,\n          align = _this$props3.align,\n          destroyPopupOnHide = _this$props3.destroyPopupOnHide,\n          onMouseEnter = _this$props3.onMouseEnter,\n          onMouseLeave = _this$props3.onMouseLeave,\n          onMouseDown = _this$props3.onMouseDown,\n          onTouchStart = _this$props3.onTouchStart,\n          children = _this$props3.children;\n      var mergedClassName = classNames(prefixCls, className, alignClassName);\n      var hiddenClassName = \"\".concat(prefixCls, \"-hidden\"); // ================== Style ==================\n\n      var sizeStyle = {};\n\n      if (stretch) {\n        // Stretch with target\n        if (stretch.indexOf('height') !== -1) {\n          sizeStyle.height = targetHeight;\n        } else if (stretch.indexOf('minHeight') !== -1) {\n          sizeStyle.minHeight = targetHeight;\n        }\n\n        if (stretch.indexOf('width') !== -1) {\n          sizeStyle.width = targetWidth;\n        } else if (stretch.indexOf('minWidth') !== -1) {\n          sizeStyle.minWidth = targetWidth;\n        }\n      }\n\n      var mergedStyle = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, sizeStyle), _this.getZIndexStyle()), style), {}, {\n        opacity: status === 'stable' || !visible ? undefined : 0,\n        pointerEvents: status === 'stable' || !visible ? undefined : 'none'\n      }); // ================= Motions =================\n\n\n      var mergedMotion = _this.getMotion();\n\n      var mergedMotionVisible = visible;\n\n      if (visible && status !== 'beforeMotion' && status !== 'motion' && status !== 'stable') {\n        mergedMotion.motionAppear = false;\n        mergedMotion.motionEnter = false;\n        mergedMotion.motionLeave = false;\n      }\n\n      if (status === 'afterAlign' || status === 'beforeMotion') {\n        mergedMotionVisible = false;\n      } // Update trigger to tell if is in motion\n\n\n      ['onEnterStart', 'onAppearStart', 'onLeaveStart'].forEach(function (event) {\n        var originFunc = mergedMotion === null || mergedMotion === void 0 ? void 0 : mergedMotion[event];\n\n        mergedMotion[event] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          originFunc === null || originFunc === void 0 ? void 0 : originFunc.apply(void 0, args);\n\n          _this.setState({\n            inMotion: true\n          });\n        };\n      }); // ================== Align ==================\n\n      var mergedAlignDisabled = !visible || status !== 'align' && status !== 'aligned' && status !== 'stable'; // ================== Popup ==================\n\n      var mergedPopupVisible = true;\n\n      if (status === 'stable') {\n        mergedPopupVisible = visible;\n      } // Only remove popup since mask may still need animation\n\n\n      if (destroyPopupOnHide && !mergedPopupVisible) {\n        return null;\n      }\n\n      return React.createElement(CSSMotion, Object.assign({\n        visible: mergedMotionVisible\n      }, mergedMotion, {\n        removeOnLeave: false,\n        onEnterEnd: _this.onMotionEnd,\n        onLeaveEnd: _this.onMotionEnd,\n        leavedClassName: hiddenClassName\n      }), function (_ref, motionRef) {\n        var motionStyle = _ref.style,\n            motionClassName = _ref.className;\n        return React.createElement(Align, {\n          target: _this.getAlignTarget(),\n          key: \"popup\",\n          ref: _this.alignRef,\n          monitorWindowResize: true,\n          disabled: mergedAlignDisabled,\n          align: align,\n          onAlign: _this.onAlign\n        }, React.createElement(PopupInner, {\n          prefixCls: prefixCls,\n          className: classNames(mergedClassName, motionClassName),\n          ref: composeRef(motionRef, _this.popupRef),\n          onMouseEnter: onMouseEnter,\n          onMouseLeave: onMouseLeave,\n          onMouseDown: onMouseDown,\n          onTouchStart: onTouchStart,\n          style: _objectSpread(_objectSpread({}, mergedStyle), motionStyle)\n        }, children));\n      });\n    };\n\n    _this.renderMaskElement = function () {\n      var _this$props4 = _this.props,\n          mask = _this$props4.mask,\n          maskMotion = _this$props4.maskMotion,\n          maskTransitionName = _this$props4.maskTransitionName,\n          maskAnimation = _this$props4.maskAnimation,\n          prefixCls = _this$props4.prefixCls,\n          visible = _this$props4.visible;\n\n      if (!mask) {\n        return null;\n      }\n\n      var motion = {};\n\n      if (maskMotion && maskMotion.motionName) {\n        motion = _objectSpread({\n          motionAppear: true\n        }, getMotion({\n          motion: maskMotion,\n          prefixCls: prefixCls,\n          transitionName: maskTransitionName,\n          animation: maskAnimation\n        }));\n      }\n\n      return React.createElement(CSSMotion, Object.assign({}, motion, {\n        visible: visible,\n        removeOnLeave: true\n      }), function (_ref2) {\n        var className = _ref2.className;\n        return React.createElement(\"div\", {\n          style: _this.getZIndexStyle(),\n          key: \"mask\",\n          className: classNames(\"\".concat(prefixCls, \"-mask\"), className)\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Popup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidUpdate();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var status = this.state.status;\n      var _this$props5 = this.props,\n          getRootDomNode = _this$props5.getRootDomNode,\n          visible = _this$props5.visible,\n          stretch = _this$props5.stretch; // If there is a pending state update, cancel it, a new one will be set if necessary\n\n      this.cancelFrameState();\n\n      if (visible && status !== 'stable') {\n        switch (status) {\n          case null:\n            {\n              this.setStateOnNextFrame({\n                status: stretch ? 'measure' : 'align'\n              });\n              break;\n            }\n\n          case 'afterAlign':\n            {\n              this.setStateOnNextFrame({\n                status: supportMotion(this.getMotion()) ? 'beforeMotion' : 'stable'\n              });\n              break;\n            }\n\n          case 'AfterMotion':\n            {\n              this.setStateOnNextFrame({\n                status: 'stable'\n              });\n              break;\n            }\n\n          default:\n            {\n              // Go to next status\n              var queue = ['measure', 'align', null, 'beforeMotion', 'motion'];\n              var index = queue.indexOf(status);\n              var nextStatus = queue[index + 1];\n\n              if (index !== -1 && nextStatus) {\n                this.setStateOnNextFrame({\n                  status: nextStatus\n                });\n              }\n            }\n        }\n      } // Measure stretch size\n\n\n      if (status === 'measure') {\n        var $ele = getRootDomNode();\n\n        if ($ele) {\n          this.setStateOnNextFrame({\n            targetHeight: $ele.offsetHeight,\n            targetWidth: $ele.offsetWidth\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.cancelFrameState();\n    }\n  }, {\n    key: \"getZIndexStyle\",\n    value: function getZIndexStyle() {\n      var zIndex = this.props.zIndex;\n      return {\n        zIndex: zIndex\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, this.renderMaskElement(), this.renderPopupElement());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref3, _ref4) {\n      var visible = _ref3.visible,\n          props = _objectWithoutProperties(_ref3, [\"visible\"]);\n\n      var prevVisible = _ref4.prevVisible,\n          status = _ref4.status,\n          inMotion = _ref4.inMotion;\n      var newState = {\n        prevVisible: visible,\n        status: status\n      };\n      var mergedMotion = getMotion(props);\n\n      if (prevVisible === null && visible === false) {\n        // Init render should always be stable\n        newState.status = 'stable';\n        newState.inMotion = false;\n      } else if (visible !== prevVisible) {\n        newState.inMotion = false;\n\n        if (visible || supportMotion(mergedMotion) && inMotion) {\n          newState.status = null;\n        } else {\n          newState.status = 'stable';\n        }\n\n        if (visible) {\n          newState.alignClassName = null;\n        }\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Popup;\n}(Component);\n\nexport default Popup;\n/* eslint-enable */","map":null,"metadata":{},"sourceType":"module"}