{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport RcMentions from 'rc-mentions';\nimport Spin from '../spin';\nimport { ConfigContext } from '../config-provider';\nimport { composeRef } from '../_util/ref';\nvar Option = RcMentions.Option;\nexport { Option };\n\nfunction loadingFilterOption() {\n  return true;\n}\n\nvar InternalMentions = function InternalMentions(_a, ref) {\n  var _classNames;\n\n  var customizePrefixCls = _a.prefixCls,\n      className = _a.className,\n      disabled = _a.disabled,\n      loading = _a.loading,\n      filterOption = _a.filterOption,\n      children = _a.children,\n      notFoundContent = _a.notFoundContent,\n      restProps = __rest(_a, [\"prefixCls\", \"className\", \"disabled\", \"loading\", \"filterOption\", \"children\", \"notFoundContent\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var innerRef = React.useRef();\n  var mergedRef = composeRef(ref, innerRef);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction;\n\n  var onFocus = function onFocus() {\n    if (restProps.onFocus) {\n      restProps.onFocus.apply(restProps, arguments);\n    }\n\n    setFocused(true);\n  };\n\n  var onBlur = function onBlur() {\n    if (restProps.onBlur) {\n      restProps.onBlur.apply(restProps, arguments);\n    }\n\n    setFocused(false);\n  };\n\n  var getNotFoundContent = function getNotFoundContent() {\n    if (notFoundContent !== undefined) {\n      return notFoundContent;\n    }\n\n    return renderEmpty('Select');\n  };\n\n  var getOptions = function getOptions() {\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Option, {\n        value: \"ANTD_SEARCHING\",\n        disabled: true\n      }, /*#__PURE__*/React.createElement(Spin, {\n        size: \"small\"\n      }));\n    }\n\n    return children;\n  };\n\n  var getFilterOption = function getFilterOption() {\n    if (loading) {\n      return loadingFilterOption;\n    }\n\n    return filterOption;\n  };\n\n  var prefixCls = getPrefixCls('mentions', customizePrefixCls);\n  var mergedClassName = classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames));\n  return /*#__PURE__*/React.createElement(RcMentions, _extends({\n    prefixCls: prefixCls,\n    notFoundContent: getNotFoundContent(),\n    className: mergedClassName,\n    disabled: disabled,\n    direction: direction\n  }, restProps, {\n    filterOption: getFilterOption(),\n    onFocus: onFocus,\n    onBlur: onBlur,\n    ref: mergedRef\n  }), getOptions());\n};\n\nvar Mentions = /*#__PURE__*/React.forwardRef(InternalMentions);\nMentions.displayName = 'Mentions';\nMentions.Option = Option;\n\nMentions.getMentions = function () {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var config = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _ref = config || {},\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? '@' : _ref$prefix,\n      _ref$split = _ref.split,\n      split = _ref$split === void 0 ? ' ' : _ref$split;\n\n  var prefixList = Array.isArray(prefix) ? prefix : [prefix];\n  return value.split(split).map(function () {\n    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var hitPrefix = null;\n    prefixList.some(function (prefixStr) {\n      var startStr = str.slice(0, prefixStr.length);\n\n      if (startStr === prefixStr) {\n        hitPrefix = prefixStr;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (hitPrefix !== null) {\n      return {\n        prefix: hitPrefix,\n        value: str.slice(hitPrefix.length)\n      };\n    }\n\n    return null;\n  }).filter(function (entity) {\n    return !!entity && !!entity.value;\n  });\n};\n\nexport default Mentions;","map":null,"metadata":{},"sourceType":"module"}