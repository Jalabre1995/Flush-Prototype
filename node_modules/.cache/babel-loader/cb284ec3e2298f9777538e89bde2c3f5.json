{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport CSSMotion from 'rc-motion';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport useCacheErrors from './hooks/useCacheErrors';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nvar iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\n\nvar FormItemInput = function FormItemInput(_ref) {\n  var prefixCls = _ref.prefixCls,\n      wrapperCol = _ref.wrapperCol,\n      children = _ref.children,\n      help = _ref.help,\n      errors = _ref.errors,\n      onDomErrorVisibleChange = _ref.onDomErrorVisibleChange,\n      hasFeedback = _ref.hasFeedback,\n      validateStatus = _ref.validateStatus,\n      extra = _ref.extra;\n  var forceUpdate = useForceUpdate();\n  var baseClassName = \"\".concat(prefixCls, \"-item\");\n  var formContext = React.useContext(FormContext);\n  var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n  var className = classNames(\"\".concat(baseClassName, \"-control\"), mergedWrapperCol.className);\n\n  var _useCacheErrors = useCacheErrors(errors, function (changedVisible) {\n    if (changedVisible) {\n      /**\n       * We trigger in sync to avoid dom shaking but this get warning in react 16.13.\n       * So use Promise to keep in micro async to handle this.\n       * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485\n       */\n      Promise.resolve().then(function () {\n        onDomErrorVisibleChange(true);\n      });\n    }\n\n    forceUpdate();\n  }, !!help),\n      _useCacheErrors2 = _slicedToArray(_useCacheErrors, 2),\n      visible = _useCacheErrors2[0],\n      cacheErrors = _useCacheErrors2[1];\n\n  React.useEffect(function () {\n    return function () {\n      onDomErrorVisibleChange(false);\n    };\n  }, []);\n  var memoErrors = useMemo(function () {\n    return cacheErrors;\n  }, visible, function (_, nextVisible) {\n    return nextVisible;\n  }); // Should provides additional icon if `hasFeedback`\n\n  var IconNode = validateStatus && iconMap[validateStatus];\n  var icon = hasFeedback && IconNode ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(baseClassName, \"-children-icon\")\n  }, /*#__PURE__*/React.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info\n\n  var subFormContext = _extends({}, formContext);\n\n  delete subFormContext.labelCol;\n  delete subFormContext.wrapperCol;\n  return /*#__PURE__*/React.createElement(FormContext.Provider, {\n    value: subFormContext\n  }, /*#__PURE__*/React.createElement(Col, _extends({}, mergedWrapperCol, {\n    className: className\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input-content\")\n  }, children), icon), /*#__PURE__*/React.createElement(CSSMotion, {\n    motionDeadline: 500,\n    visible: visible,\n    motionName: \"show-help\",\n    onLeaveEnd: function onLeaveEnd() {\n      onDomErrorVisibleChange(false);\n    },\n    motionAppear: true,\n    removeOnLeave: true\n  }, function (_ref2) {\n    var motionClassName = _ref2.className;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(\"\".concat(baseClassName, \"-explain\"), motionClassName),\n      key: \"help\"\n    }, memoErrors.map(function (error, index) {\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line react/no-array-index-key\n        React.createElement(\"div\", {\n          key: index,\n          role: \"alert\"\n        }, error)\n      );\n    }));\n  }), extra && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-extra\")\n  }, extra)));\n};\n\nexport default FormItemInput;","map":null,"metadata":{},"sourceType":"module"}