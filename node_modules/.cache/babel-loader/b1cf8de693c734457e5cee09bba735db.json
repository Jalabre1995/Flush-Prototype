{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { composeRef } from \"rc-util/es/ref\";\nimport SearchOutlined from '@ant-design/icons/SearchOutlined';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport Input from './Input';\nimport Button from '../button';\nimport SizeContext from '../config-provider/SizeContext';\nimport { ConfigConsumer } from '../config-provider';\nimport { cloneElement, replaceElement } from '../_util/reactNode';\nvar Search = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var inputRef = React.useRef(null);\n\n  var onChange = function onChange(e) {\n    var customOnChange = props.onChange,\n        customOnSearch = props.onSearch;\n\n    if (e && e.target && e.type === 'click' && customOnSearch) {\n      customOnSearch(e.target.value, e);\n    }\n\n    if (customOnChange) {\n      customOnChange(e);\n    }\n  };\n\n  var onMouseDown = function onMouseDown(e) {\n    var _a;\n\n    if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {\n      e.preventDefault();\n    }\n  };\n\n  var onSearch = function onSearch(e) {\n    var _a;\n\n    var customOnSearch = props.onSearch,\n        loading = props.loading,\n        disabled = props.disabled;\n\n    if (loading || disabled) {\n      return;\n    }\n\n    if (customOnSearch) {\n      customOnSearch((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input.value, e);\n    }\n  };\n\n  var renderLoading = function renderLoading(prefixCls) {\n    var enterButton = props.enterButton,\n        customizeSize = props.size;\n\n    if (enterButton) {\n      return /*#__PURE__*/React.createElement(SizeContext.Consumer, {\n        key: \"enterButton\"\n      }, function (size) {\n        return /*#__PURE__*/React.createElement(Button, {\n          className: \"\".concat(prefixCls, \"-button\"),\n          type: \"primary\",\n          size: customizeSize || size\n        }, /*#__PURE__*/React.createElement(LoadingOutlined, null));\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(LoadingOutlined, {\n      className: \"\".concat(prefixCls, \"-icon\"),\n      key: \"loadingIcon\"\n    });\n  };\n\n  var renderSuffix = function renderSuffix(prefixCls) {\n    var suffix = props.suffix,\n        enterButton = props.enterButton,\n        loading = props.loading;\n\n    if (loading && !enterButton) {\n      return [suffix, renderLoading(prefixCls)];\n    }\n\n    if (enterButton) return suffix;\n    var icon = /*#__PURE__*/React.createElement(SearchOutlined, {\n      className: \"\".concat(prefixCls, \"-icon\"),\n      key: \"searchIcon\",\n      onClick: onSearch\n    });\n\n    if (suffix) {\n      return [replaceElement(suffix, null, {\n        key: 'suffix'\n      }), icon];\n    }\n\n    return icon;\n  };\n\n  var renderAddonAfter = function renderAddonAfter(prefixCls, size) {\n    var enterButton = props.enterButton,\n        disabled = props.disabled,\n        addonAfter = props.addonAfter,\n        loading = props.loading;\n    var btnClassName = \"\".concat(prefixCls, \"-button\");\n\n    if (loading && enterButton) {\n      return [renderLoading(prefixCls), addonAfter];\n    }\n\n    if (!enterButton) return addonAfter;\n    var button;\n    var enterButtonAsElement = enterButton;\n    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;\n\n    if (isAntdButton || enterButtonAsElement.type === 'button') {\n      button = cloneElement(enterButtonAsElement, _extends({\n        onMouseDown: onMouseDown,\n        onClick: onSearch,\n        key: 'enterButton'\n      }, isAntdButton ? {\n        className: btnClassName,\n        size: size\n      } : {}));\n    } else {\n      button = /*#__PURE__*/React.createElement(Button, {\n        className: btnClassName,\n        type: \"primary\",\n        size: size,\n        disabled: disabled,\n        key: \"enterButton\",\n        onMouseDown: onMouseDown,\n        onClick: onSearch\n      }, enterButton === true ? /*#__PURE__*/React.createElement(SearchOutlined, null) : enterButton);\n    }\n\n    if (addonAfter) {\n      return [button, replaceElement(addonAfter, null, {\n        key: 'addonAfter'\n      })];\n    }\n\n    return button;\n  };\n\n  var renderSearch = function renderSearch(_ref) {\n    var getPrefixCls = _ref.getPrefixCls,\n        direction = _ref.direction;\n\n    var customizePrefixCls = props.prefixCls,\n        customizeInputPrefixCls = props.inputPrefixCls,\n        enterButton = props.enterButton,\n        className = props.className,\n        customizeSize = props.size,\n        restProps = __rest(props, [\"prefixCls\", \"inputPrefixCls\", \"enterButton\", \"className\", \"size\"]);\n\n    delete restProps.onSearch;\n    delete restProps.loading;\n    var prefixCls = getPrefixCls('input-search', customizePrefixCls);\n    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);\n\n    var getClassName = function getClassName(size) {\n      var inputClassName;\n\n      if (enterButton) {\n        var _classNames;\n\n        inputClassName = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-enter-button\"), !!enterButton), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(size), !!size), _classNames));\n      } else {\n        inputClassName = classNames(prefixCls, className, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'));\n      }\n\n      return inputClassName;\n    };\n\n    return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {\n      return /*#__PURE__*/React.createElement(Input, _extends({\n        ref: composeRef(inputRef, ref),\n        onPressEnter: onSearch\n      }, restProps, {\n        size: customizeSize || size,\n        prefixCls: inputPrefixCls,\n        addonAfter: renderAddonAfter(prefixCls, customizeSize || size),\n        suffix: renderSuffix(prefixCls),\n        onChange: onChange,\n        className: getClassName(customizeSize || size)\n      }));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSearch);\n});\nSearch.defaultProps = {\n  enterButton: false\n};\nSearch.displayName = 'Search';\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}