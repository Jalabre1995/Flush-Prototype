{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Button from '../button';\nimport { convertLegacyProps } from '../button/button';\n\nvar ActionButton = function ActionButton(props) {\n  var clickedRef = React.useRef(false);\n  var ref = React.useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  React.useEffect(function () {\n    var timeoutId;\n\n    if (props.autoFocus) {\n      var $this = ref.current;\n      timeoutId = setTimeout(function () {\n        return $this.focus();\n      });\n    }\n\n    return function () {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n\n  var handlePromiseOnOk = function handlePromiseOnOk(returnValueOfOnOk) {\n    var closeModal = props.closeModal;\n\n    if (!returnValueOfOnOk || !returnValueOfOnOk.then) {\n      return;\n    }\n\n    setLoading(true);\n    returnValueOfOnOk.then(function () {\n      // It's unnecessary to set loading=false, for the Modal will be unmounted after close.\n      // setState({ loading: false });\n      closeModal.apply(void 0, arguments);\n    }, function (e) {\n      // Emit error when catch promise reject\n      // eslint-disable-next-line no-console\n      console.error(e); // See: https://github.com/ant-design/ant-design/issues/6183\n\n      setLoading(false);\n      clickedRef.current = false;\n    });\n  };\n\n  var onClick = function onClick() {\n    var actionFn = props.actionFn,\n        closeModal = props.closeModal;\n\n    if (clickedRef.current) {\n      return;\n    }\n\n    clickedRef.current = true;\n\n    if (!actionFn) {\n      closeModal();\n      return;\n    }\n\n    var returnValueOfOnOk;\n\n    if (actionFn.length) {\n      returnValueOfOnOk = actionFn(closeModal); // https://github.com/ant-design/ant-design/issues/23358\n\n      clickedRef.current = false;\n    } else {\n      returnValueOfOnOk = actionFn();\n\n      if (!returnValueOfOnOk) {\n        closeModal();\n        return;\n      }\n    }\n\n    handlePromiseOnOk(returnValueOfOnOk);\n  };\n\n  var type = props.type,\n      children = props.children,\n      prefixCls = props.prefixCls,\n      buttonProps = props.buttonProps;\n  return /*#__PURE__*/React.createElement(Button, _extends({}, convertLegacyProps(type), {\n    onClick: onClick,\n    loading: loading,\n    prefixCls: prefixCls\n  }, buttonProps, {\n    ref: ref\n  }), children);\n};\n\nexport default ActionButton;","map":null,"metadata":{},"sourceType":"module"}