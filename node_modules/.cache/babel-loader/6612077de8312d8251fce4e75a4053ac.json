{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport Dialog from 'rc-dialog';\nimport RotateLeftOutlined from '@ant-design/icons/RotateLeftOutlined';\nimport RotateRightOutlined from '@ant-design/icons/RotateRightOutlined';\nimport ZoomInOutlined from '@ant-design/icons/ZoomInOutlined';\nimport ZoomOutOutlined from '@ant-design/icons/ZoomOutOutlined';\nimport CloseOutlined from '@ant-design/icons/CloseOutlined';\nimport classnames from 'classnames';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport { getOffset } from \"rc-util/es/Dom/css\";\nimport useFrameSetState from './hooks/useFrameSetState';\nimport getFixScaleEleTransPosition from './getFixScaleEleTransPosition';\nvar useState = React.useState;\nvar initialPosition = {\n  x: 0,\n  y: 0\n};\n\nvar Preview = function Preview(props) {\n  var prefixCls = props.prefixCls,\n      src = props.src,\n      alt = props.alt,\n      onClose = props.onClose,\n      afterClose = props.afterClose,\n      visible = props.visible,\n      restProps = _objectWithoutProperties(props, [\"prefixCls\", \"src\", \"alt\", \"onClose\", \"afterClose\", \"visible\"]);\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      scale = _useState2[0],\n      setScale = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rotate = _useState4[0],\n      setRotate = _useState4[1];\n\n  var _useFrameSetState = useFrameSetState(initialPosition),\n      _useFrameSetState2 = _slicedToArray(_useFrameSetState, 2),\n      position = _useFrameSetState2[0],\n      setPosition = _useFrameSetState2[1];\n\n  var imgRef = React.useRef();\n  var originPositionRef = React.useRef({\n    originX: 0,\n    originY: 0,\n    deltaX: 0,\n    deltaY: 0\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isMoving = _React$useState2[0],\n      setMoving = _React$useState2[1];\n\n  var onAfterClose = function onAfterClose() {\n    setScale(1);\n    setRotate(0);\n    setPosition(initialPosition);\n  };\n\n  var onZoomIn = function onZoomIn() {\n    setScale(function (value) {\n      return value + 1;\n    });\n    setPosition(initialPosition);\n  };\n\n  var onZoomOut = function onZoomOut() {\n    if (scale > 1) {\n      setScale(function (value) {\n        return value - 1;\n      });\n    }\n\n    setPosition(initialPosition);\n  };\n\n  var onRotateRight = function onRotateRight() {\n    setRotate(function (value) {\n      return value + 90;\n    });\n  };\n\n  var onRotateLeft = function onRotateLeft() {\n    setRotate(function (value) {\n      return value - 90;\n    });\n  };\n\n  var wrapClassName = classnames(_defineProperty({}, \"\".concat(prefixCls, \"-moving\"), isMoving));\n  var toolClassName = \"\".concat(prefixCls, \"-operations-operation\");\n  var iconClassName = \"\".concat(prefixCls, \"-operations-icon\");\n  var tools = [{\n    Icon: CloseOutlined,\n    onClick: onClose,\n    type: 'close'\n  }, {\n    Icon: ZoomInOutlined,\n    onClick: onZoomIn,\n    type: 'zoomIn'\n  }, {\n    Icon: ZoomOutOutlined,\n    onClick: onZoomOut,\n    type: 'zoomOut',\n    disabled: scale === 1\n  }, {\n    Icon: RotateRightOutlined,\n    onClick: onRotateRight,\n    type: 'rotateRight'\n  }, {\n    Icon: RotateLeftOutlined,\n    onClick: onRotateLeft,\n    type: 'rotateLeft'\n  }];\n\n  var onMouseUp = function onMouseUp() {\n    if (visible && isMoving) {\n      var width = imgRef.current.offsetWidth * scale;\n      var height = imgRef.current.offsetHeight * scale;\n\n      var _getOffset = getOffset(imgRef.current),\n          left = _getOffset.left,\n          top = _getOffset.top;\n\n      var isRotate = rotate % 180 !== 0;\n      setMoving(false);\n      var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, left, top);\n\n      if (fixState) {\n        setPosition(_objectSpread({}, fixState));\n      }\n    }\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n    originPositionRef.current.deltaX = event.pageX - position.x;\n    originPositionRef.current.deltaY = event.pageY - position.y;\n    originPositionRef.current.originX = position.x;\n    originPositionRef.current.originY = position.y;\n    setMoving(true);\n  };\n\n  var onMouseMove = function onMouseMove(event) {\n    if (visible && isMoving) {\n      setPosition({\n        x: event.pageX - originPositionRef.current.deltaX,\n        y: event.pageY - originPositionRef.current.deltaY\n      });\n    }\n  };\n\n  React.useEffect(function () {\n    var onTopMouseUpListener;\n    var onTopMouseMoveListener;\n    var onMouseUpListener = addEventListener(window, 'mouseup', onMouseUp, false);\n    var onMouseMoveListener = addEventListener(window, 'mousemove', onMouseMove, false); // Resolve if in iframe lost event\n\n    /* istanbul ignore next */\n\n    if (window.top !== window.self) {\n      onTopMouseUpListener = addEventListener(window.top, 'mouseup', onMouseUp, false);\n      onTopMouseMoveListener = addEventListener(window.top, 'mousemove', onMouseMove, false);\n    }\n\n    return function () {\n      onMouseUpListener.remove();\n      onMouseMoveListener.remove();\n      /* istanbul ignore next */\n\n      if (onTopMouseUpListener) onTopMouseUpListener.remove();\n      /* istanbul ignore next */\n\n      if (onTopMouseMoveListener) onTopMouseMoveListener.remove();\n    };\n  }, [visible, isMoving]);\n  return React.createElement(Dialog, Object.assign({}, restProps, {\n    transitionName: \"zoom\",\n    maskTransitionName: \"fade\",\n    closable: false,\n    keyboard: true,\n    prefixCls: prefixCls,\n    onClose: onClose,\n    afterClose: onAfterClose,\n    visible: visible,\n    wrapClassName: wrapClassName\n  }), React.createElement(\"ul\", {\n    className: \"\".concat(prefixCls, \"-operations\")\n  }, tools.map(function (_ref) {\n    var Icon = _ref.Icon,\n        onClick = _ref.onClick,\n        type = _ref.type,\n        disabled = _ref.disabled;\n    return React.createElement(\"li\", {\n      className: classnames(toolClassName, _defineProperty({}, \"\".concat(prefixCls, \"-operations-operation-disabled\"), !!disabled)),\n      onClick: onClick,\n      key: type\n    }, React.createElement(Icon, {\n      className: iconClassName\n    }));\n  })), React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-img-wrapper\"),\n    style: {\n      transform: \"translate3d(\".concat(position.x, \"px, \").concat(position.y, \"px, 0)\")\n    }\n  }, React.createElement(\"img\", {\n    onMouseDown: onMouseDown,\n    ref: imgRef,\n    className: \"\".concat(prefixCls, \"-img\"),\n    src: src,\n    alt: alt,\n    style: {\n      transform: \"scale3d(\".concat(scale, \", \").concat(scale, \", 1) rotate(\").concat(rotate, \"deg)\")\n    }\n  })));\n};\n\nexport default Preview;","map":null,"metadata":{},"sourceType":"module"}