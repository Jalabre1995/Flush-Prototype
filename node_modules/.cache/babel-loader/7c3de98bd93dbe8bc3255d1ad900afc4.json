{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport Affix from '../affix';\nimport { ConfigContext } from '../config-provider';\nimport scrollTo from '../_util/scrollTo';\nimport getScroll from '../_util/getScroll';\nimport AnchorContext from './context';\n\nfunction getDefaultContainer() {\n  return window;\n}\n\nfunction getOffsetTop(element, container) {\n  if (!element.getClientRects().length) {\n    return 0;\n  }\n\n  var rect = element.getBoundingClientRect();\n\n  if (rect.width || rect.height) {\n    if (container === window) {\n      container = element.ownerDocument.documentElement;\n      return rect.top - container.clientTop;\n    }\n\n    return rect.top - container.getBoundingClientRect().top;\n  }\n\n  return rect.top;\n}\n\nvar sharpMatcherRegx = /#(\\S+)$/;\n\nvar Anchor = /*#__PURE__*/function (_React$Component) {\n  _inherits(Anchor, _React$Component);\n\n  var _super = _createSuper(Anchor);\n\n  function Anchor() {\n    var _this;\n\n    _classCallCheck(this, Anchor);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      activeLink: null\n    };\n    _this.links = []; // Context\n\n    _this.registerLink = function (link) {\n      if (!_this.links.includes(link)) {\n        _this.links.push(link);\n      }\n    };\n\n    _this.unregisterLink = function (link) {\n      var index = _this.links.indexOf(link);\n\n      if (index !== -1) {\n        _this.links.splice(index, 1);\n      }\n    };\n\n    _this.getContainer = function () {\n      var getTargetContainer = _this.context.getTargetContainer;\n      var getContainer = _this.props.getContainer;\n      var getFunc = getContainer || getTargetContainer || getDefaultContainer;\n      return getFunc();\n    };\n\n    _this.handleScrollTo = function (link) {\n      var _this$props = _this.props,\n          offsetTop = _this$props.offsetTop,\n          targetOffset = _this$props.targetOffset;\n\n      _this.setCurrentActiveLink(link);\n\n      var container = _this.getContainer();\n\n      var scrollTop = getScroll(container, true);\n      var sharpLinkMatch = sharpMatcherRegx.exec(link);\n\n      if (!sharpLinkMatch) {\n        return;\n      }\n\n      var targetElement = document.getElementById(sharpLinkMatch[1]);\n\n      if (!targetElement) {\n        return;\n      }\n\n      var eleOffsetTop = getOffsetTop(targetElement, container);\n      var y = scrollTop + eleOffsetTop;\n      y -= targetOffset !== undefined ? targetOffset : offsetTop || 0;\n      _this.animating = true;\n      scrollTo(y, {\n        callback: function callback() {\n          _this.animating = false;\n        },\n        getContainer: _this.getContainer\n      });\n    };\n\n    _this.saveInkNode = function (node) {\n      _this.inkNode = node;\n    };\n\n    _this.setCurrentActiveLink = function (link) {\n      var activeLink = _this.state.activeLink;\n      var onChange = _this.props.onChange;\n\n      if (activeLink !== link) {\n        _this.setState({\n          activeLink: link\n        });\n\n        if (onChange) {\n          onChange(link);\n        }\n      }\n    };\n\n    _this.handleScroll = function () {\n      if (_this.animating) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          offsetTop = _this$props2.offsetTop,\n          bounds = _this$props2.bounds,\n          targetOffset = _this$props2.targetOffset;\n\n      var currentActiveLink = _this.getCurrentAnchor(targetOffset !== undefined ? targetOffset : offsetTop || 0, bounds);\n\n      _this.setCurrentActiveLink(currentActiveLink);\n    };\n\n    _this.updateInk = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          prefixCls = _assertThisInitialize.prefixCls;\n\n      var anchorNode = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      var linkNode = anchorNode.getElementsByClassName(\"\".concat(prefixCls, \"-link-title-active\"))[0];\n\n      if (linkNode) {\n        _this.inkNode.style.top = \"\".concat(linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5, \"px\");\n      }\n    };\n\n    _this.render = function () {\n      var _this$context = _this.context,\n          getPrefixCls = _this$context.getPrefixCls,\n          direction = _this$context.direction;\n      var _this$props3 = _this.props,\n          customizePrefixCls = _this$props3.prefixCls,\n          _this$props3$classNam = _this$props3.className,\n          className = _this$props3$classNam === void 0 ? '' : _this$props3$classNam,\n          style = _this$props3.style,\n          offsetTop = _this$props3.offsetTop,\n          affix = _this$props3.affix,\n          showInkInFixed = _this$props3.showInkInFixed,\n          children = _this$props3.children;\n      var activeLink = _this.state.activeLink;\n      var prefixCls = getPrefixCls('anchor', customizePrefixCls); // To support old version react.\n      // Have to add prefixCls on the instance.\n      // https://github.com/facebook/react/issues/12397\n\n      _this.prefixCls = prefixCls;\n      var inkClass = classNames(\"\".concat(prefixCls, \"-ink-ball\"), {\n        visible: activeLink\n      });\n      var wrapperClass = classNames(className, \"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'));\n      var anchorClass = classNames(prefixCls, {\n        fixed: !affix && !showInkInFixed\n      });\n\n      var wrapperStyle = _extends({\n        maxHeight: offsetTop ? \"calc(100vh - \".concat(offsetTop, \"px)\") : '100vh'\n      }, style);\n\n      var anchorContent = /*#__PURE__*/React.createElement(\"div\", {\n        className: wrapperClass,\n        style: wrapperStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: anchorClass\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-ink\")\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: inkClass,\n        ref: _this.saveInkNode\n      })), children));\n      return /*#__PURE__*/React.createElement(AnchorContext.Provider, {\n        value: {\n          registerLink: _this.registerLink,\n          unregisterLink: _this.unregisterLink,\n          activeLink: _this.state.activeLink,\n          scrollTo: _this.handleScrollTo,\n          onClick: _this.props.onClick\n        }\n      }, !affix ? anchorContent : /*#__PURE__*/React.createElement(Affix, {\n        offsetTop: offsetTop,\n        target: _this.getContainer\n      }, anchorContent));\n    };\n\n    return _this;\n  }\n\n  _createClass(Anchor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollContainer = this.getContainer();\n      this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);\n      this.handleScroll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.scrollEvent) {\n        var currentContainer = this.getContainer();\n\n        if (this.scrollContainer !== currentContainer) {\n          this.scrollContainer = currentContainer;\n          this.scrollEvent.remove();\n          this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);\n          this.handleScroll();\n        }\n      }\n\n      this.updateInk();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.scrollEvent) {\n        this.scrollEvent.remove();\n      }\n    }\n  }, {\n    key: \"getCurrentAnchor\",\n    value: function getCurrentAnchor() {\n      var offsetTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var bounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      var getCurrentAnchor = this.props.getCurrentAnchor;\n\n      if (typeof getCurrentAnchor === 'function') {\n        return getCurrentAnchor();\n      }\n\n      var linkSections = [];\n      var container = this.getContainer();\n      this.links.forEach(function (link) {\n        var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());\n\n        if (!sharpLinkMatch) {\n          return;\n        }\n\n        var target = document.getElementById(sharpLinkMatch[1]);\n\n        if (target) {\n          var top = getOffsetTop(target, container);\n\n          if (top < offsetTop + bounds) {\n            linkSections.push({\n              link: link,\n              top: top\n            });\n          }\n        }\n      });\n\n      if (linkSections.length) {\n        var maxSection = linkSections.reduce(function (prev, curr) {\n          return curr.top > prev.top ? curr : prev;\n        });\n        return maxSection.link;\n      }\n\n      return '';\n    }\n  }]);\n\n  return Anchor;\n}(React.Component);\n\nexport { Anchor as default };\nAnchor.defaultProps = {\n  affix: true,\n  showInkInFixed: false\n};\nAnchor.contextType = ConfigContext;","map":null,"metadata":{},"sourceType":"module"}