{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport CalendarOutlined from '@ant-design/icons/CalendarOutlined';\nimport ClockCircleOutlined from '@ant-design/icons/ClockCircleOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport SwapRightOutlined from '@ant-design/icons/SwapRightOutlined';\nimport { RangePicker as RCRangePicker } from 'rc-picker';\nimport enUS from '../locale/en_US';\nimport { ConfigContext } from '../../config-provider';\nimport SizeContext from '../../config-provider/SizeContext';\nimport LocaleReceiver from '../../locale-provider/LocaleReceiver';\nimport { getRangePlaceholder } from '../util';\nimport { getTimeProps, Components } from '.';\nexport default function generateRangePicker(generateConfig) {\n  var RangePicker = /*#__PURE__*/function (_React$Component) {\n    _inherits(RangePicker, _React$Component);\n\n    var _super = _createSuper(RangePicker);\n\n    function RangePicker() {\n      var _this;\n\n      _classCallCheck(this, RangePicker);\n\n      _this = _super.apply(this, arguments);\n      _this.pickerRef = /*#__PURE__*/React.createRef();\n\n      _this.focus = function () {\n        if (_this.pickerRef.current) {\n          _this.pickerRef.current.focus();\n        }\n      };\n\n      _this.blur = function () {\n        if (_this.pickerRef.current) {\n          _this.pickerRef.current.blur();\n        }\n      };\n\n      _this.getDefaultLocale = function () {\n        var locale = _this.props.locale;\n\n        var result = _extends(_extends({}, enUS), locale);\n\n        result.lang = _extends(_extends({}, result.lang), (locale || {}).lang);\n        return result;\n      };\n\n      _this.renderPicker = function (locale) {\n        var _this$context = _this.context,\n            getPrefixCls = _this$context.getPrefixCls,\n            direction = _this$context.direction,\n            getPopupContainer = _this$context.getPopupContainer;\n\n        var _a = _this.props,\n            customizePrefixCls = _a.prefixCls,\n            customGetPopupContainer = _a.getPopupContainer,\n            className = _a.className,\n            customizeSize = _a.size,\n            _a$bordered = _a.bordered,\n            bordered = _a$bordered === void 0 ? true : _a$bordered,\n            placeholder = _a.placeholder,\n            restProps = __rest(_a, [\"prefixCls\", \"getPopupContainer\", \"className\", \"size\", \"bordered\", \"placeholder\"]);\n\n        var _this$props = _this.props,\n            format = _this$props.format,\n            showTime = _this$props.showTime,\n            picker = _this$props.picker;\n        var prefixCls = getPrefixCls('picker', customizePrefixCls);\n        var additionalOverrideProps = {};\n        additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({\n          format: format,\n          picker: picker\n        }, showTime)) : {}), picker === 'time' ? getTimeProps(_extends(_extends({\n          format: format\n        }, _this.props), {\n          picker: picker\n        })) : {});\n        return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {\n          var _classNames;\n\n          var mergedSize = customizeSize || size;\n          return /*#__PURE__*/React.createElement(RCRangePicker, _extends({\n            separator: /*#__PURE__*/React.createElement(\"span\", {\n              \"aria-label\": \"to\",\n              className: \"\".concat(prefixCls, \"-separator\")\n            }, /*#__PURE__*/React.createElement(SwapRightOutlined, null)),\n            ref: _this.pickerRef,\n            placeholder: getRangePlaceholder(picker, locale, placeholder),\n            suffixIcon: picker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined, null) : /*#__PURE__*/React.createElement(CalendarOutlined, null),\n            clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled, null),\n            allowClear: true,\n            transitionName: \"slide-up\"\n          }, restProps, additionalOverrideProps, {\n            className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \"\".concat(prefixCls, \"-borderless\"), !bordered), _classNames)),\n            locale: locale.lang,\n            prefixCls: prefixCls,\n            getPopupContainer: customGetPopupContainer || getPopupContainer,\n            generateConfig: generateConfig,\n            prevIcon: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"\".concat(prefixCls, \"-prev-icon\")\n            }),\n            nextIcon: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"\".concat(prefixCls, \"-next-icon\")\n            }),\n            superPrevIcon: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"\".concat(prefixCls, \"-super-prev-icon\")\n            }),\n            superNextIcon: /*#__PURE__*/React.createElement(\"span\", {\n              className: \"\".concat(prefixCls, \"-super-next-icon\")\n            }),\n            components: Components,\n            direction: direction\n          }));\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(RangePicker, [{\n      key: \"render\",\n      value: function render() {\n        return /*#__PURE__*/React.createElement(LocaleReceiver, {\n          componentName: \"DatePicker\",\n          defaultLocale: this.getDefaultLocale\n        }, this.renderPicker);\n      }\n    }]);\n\n    return RangePicker;\n  }(React.Component);\n\n  RangePicker.contextType = ConfigContext;\n  return RangePicker;\n}","map":null,"metadata":{},"sourceType":"module"}