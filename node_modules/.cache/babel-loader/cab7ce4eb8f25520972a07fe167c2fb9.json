{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport { getOffset } from \"rc-util/es/Dom/css\";\nimport Preview from './Preview';\n\nvar ImageInternal = function ImageInternal(_ref) {\n  var src = _ref.src,\n      alt = _ref.alt,\n      onInitialPreviewClose = _ref.onPreviewClose,\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'rc-image' : _ref$prefixCls,\n      _ref$previewPrefixCls = _ref.previewPrefixCls,\n      previewPrefixCls = _ref$previewPrefixCls === void 0 ? \"\".concat(prefixCls, \"-preview\") : _ref$previewPrefixCls,\n      placeholder = _ref.placeholder,\n      fallback = _ref.fallback,\n      width = _ref.width,\n      height = _ref.height,\n      style = _ref.style,\n      _ref$preview = _ref.preview,\n      preview = _ref$preview === void 0 ? true : _ref$preview,\n      originalClassName = _ref.className,\n      onClick = _ref.onClick,\n      crossOrigin = _ref.crossOrigin,\n      decoding = _ref.decoding,\n      loading = _ref.loading,\n      referrerPolicy = _ref.referrerPolicy,\n      sizes = _ref.sizes,\n      srcSet = _ref.srcSet,\n      useMap = _ref.useMap,\n      otherProps = _objectWithoutProperties(_ref, [\"src\", \"alt\", \"onPreviewClose\", \"prefixCls\", \"previewPrefixCls\", \"placeholder\", \"fallback\", \"width\", \"height\", \"style\", \"preview\", \"className\", \"onClick\", \"crossOrigin\", \"decoding\", \"loading\", \"referrerPolicy\", \"sizes\", \"srcSet\", \"useMap\"]);\n\n  var isCustomPlaceholder = placeholder && placeholder !== true;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShowPreview = _useState2[0],\n      setShowPreview = _useState2[1];\n\n  var _useState3 = useState(isCustomPlaceholder ? 'loading' : 'normal'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mousePosition = _useState6[0],\n      setMousePosition = _useState6[1];\n\n  var isError = status === 'error';\n\n  var onLoad = function onLoad() {\n    setStatus('normal');\n  };\n\n  var onError = function onError() {\n    setStatus('error');\n  };\n\n  var onPreview = function onPreview(e) {\n    var _getOffset = getOffset(e.target),\n        left = _getOffset.left,\n        top = _getOffset.top;\n\n    setShowPreview(true);\n    setMousePosition({\n      x: left,\n      y: top\n    });\n    if (onClick) onClick(e);\n  };\n\n  var onPreviewClose = function onPreviewClose(e) {\n    e.stopPropagation();\n    setShowPreview(false);\n    setMousePosition(null);\n    if (onInitialPreviewClose) onInitialPreviewClose(e);\n  };\n\n  React.useEffect(function () {\n    if (isCustomPlaceholder) {\n      setStatus('loading');\n    }\n  }, [src]);\n  var className = cn(prefixCls, originalClassName, _defineProperty({}, \"\".concat(prefixCls, \"-error\"), isError));\n  var mergedSrc = isError && fallback ? fallback : src;\n  var imgCommonProps = {\n    crossOrigin: crossOrigin,\n    decoding: decoding,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    sizes: sizes,\n    srcSet: srcSet,\n    useMap: useMap,\n    alt: alt,\n    className: cn(\"\".concat(prefixCls, \"-img\"), _defineProperty({}, \"\".concat(prefixCls, \"-img-placeholder\"), placeholder === true))\n  };\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, otherProps, {\n    className: className,\n    onClick: preview && !isError ? onPreview : onClick,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      width: width,\n      height: height\n    })\n  }), isError && fallback ? React.createElement(\"img\", Object.assign({}, imgCommonProps, {\n    src: fallback\n  })) : React.createElement(\"img\", Object.assign({}, imgCommonProps, {\n    onLoad: onLoad,\n    onError: onError,\n    src: src\n  })), status === 'loading' && React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    className: \"\".concat(prefixCls, \"-placeholder\")\n  }, placeholder)), preview && !isError && React.createElement(Preview, {\n    \"aria-hidden\": !isShowPreview,\n    visible: isShowPreview,\n    prefixCls: previewPrefixCls,\n    onClose: onPreviewClose,\n    mousePosition: mousePosition,\n    src: mergedSrc,\n    alt: alt\n  }));\n};\n\nImageInternal.displayName = 'Image';\nexport default ImageInternal;","map":null,"metadata":{},"sourceType":"module"}