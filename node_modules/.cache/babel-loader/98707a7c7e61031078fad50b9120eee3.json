{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport Animate from 'rc-animate';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport PaperClipOutlined from '@ant-design/icons/PaperClipOutlined';\nimport PictureTwoTone from '@ant-design/icons/PictureTwoTone';\nimport FileTwoTone from '@ant-design/icons/FileTwoTone';\nimport EyeOutlined from '@ant-design/icons/EyeOutlined';\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined';\nimport DownloadOutlined from '@ant-design/icons/DownloadOutlined';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport { previewImage, isImageUrl } from './utils';\nimport Tooltip from '../tooltip';\nimport Progress from '../progress';\nimport { ConfigContext } from '../config-provider';\nimport Button from '../button';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\n\nvar InternalUploadList = function InternalUploadList(_ref, ref) {\n  var _classNames6;\n\n  var listType = _ref.listType,\n      previewFile = _ref.previewFile,\n      onPreview = _ref.onPreview,\n      onDownload = _ref.onDownload,\n      onRemove = _ref.onRemove,\n      locale = _ref.locale,\n      iconRender = _ref.iconRender,\n      isImgUrl = _ref.isImageUrl,\n      customizePrefixCls = _ref.prefixCls,\n      _ref$items = _ref.items,\n      items = _ref$items === void 0 ? [] : _ref$items,\n      showPreviewIcon = _ref.showPreviewIcon,\n      showRemoveIcon = _ref.showRemoveIcon,\n      showDownloadIcon = _ref.showDownloadIcon,\n      customRemoveIcon = _ref.removeIcon,\n      customDownloadIcon = _ref.downloadIcon,\n      progressProps = _ref.progress,\n      appendAction = _ref.appendAction;\n  var forceUpdate = useForceUpdate();\n  React.useEffect(function () {\n    if (listType !== 'picture' && listType !== 'picture-card') {\n      return;\n    }\n\n    (items || []).forEach(function (file) {\n      if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== undefined) {\n        return;\n      }\n\n      file.thumbUrl = '';\n\n      if (previewFile) {\n        previewFile(file.originFileObj).then(function (previewDataUrl) {\n          // Need append '' to avoid dead loop\n          file.thumbUrl = previewDataUrl || '';\n          forceUpdate();\n        });\n      }\n    });\n  }, [listType, items, previewFile]);\n\n  var handlePreview = function handlePreview(file, e) {\n    if (!onPreview) {\n      return;\n    }\n\n    e.preventDefault();\n    return onPreview(file);\n  };\n\n  var handleDownload = function handleDownload(file) {\n    if (typeof onDownload === 'function') {\n      onDownload(file);\n    } else if (file.url) {\n      window.open(file.url);\n    }\n  };\n\n  var handleClose = function handleClose(file) {\n    if (onRemove) {\n      onRemove(file);\n    }\n  };\n\n  var handleIconRender = function handleIconRender(file) {\n    if (iconRender) {\n      return iconRender(file, listType);\n    }\n\n    var isLoading = file.status === 'uploading';\n    var fileIcon = isImgUrl && isImgUrl(file) ? /*#__PURE__*/React.createElement(PictureTwoTone, null) : /*#__PURE__*/React.createElement(FileTwoTone, null);\n    var icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(PaperClipOutlined, null);\n\n    if (listType === 'picture') {\n      icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : fileIcon;\n    } else if (listType === 'picture-card') {\n      icon = isLoading ? locale.uploading : fileIcon;\n    }\n\n    return icon;\n  };\n\n  var handleActionIconRender = function handleActionIconRender(customIcon, callback, prefixCls, title) {\n    var btnProps = {\n      type: 'text',\n      size: 'small',\n      title: title,\n      onClick: function onClick(e) {\n        callback();\n\n        if (isValidElement(customIcon) && customIcon.props.onClick) {\n          customIcon.props.onClick(e);\n        }\n      },\n      className: \"\".concat(prefixCls, \"-list-item-card-actions-btn\")\n    };\n\n    if (isValidElement(customIcon)) {\n      var btnIcon = cloneElement(customIcon, _extends(_extends({}, customIcon.props), {\n        onClick: function onClick() {}\n      }));\n      return /*#__PURE__*/React.createElement(Button, _extends({}, btnProps, {\n        icon: btnIcon\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Button, btnProps, /*#__PURE__*/React.createElement(\"span\", null, customIcon));\n  }; // Test needs\n\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      handlePreview: handlePreview,\n      handleDownload: handleDownload\n    };\n  });\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('upload', customizePrefixCls);\n  var list = items.map(function (file) {\n    var _classNames3, _classNames4;\n\n    var progress;\n    var iconNode = handleIconRender(file);\n    var icon = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-text-icon\")\n    }, iconNode);\n\n    if (listType === 'picture' || listType === 'picture-card') {\n      if (file.status === 'uploading' || !file.thumbUrl && !file.url) {\n        var _classNames;\n\n        var uploadingClassName = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-list-item-thumbnail\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-list-item-file\"), file.status !== 'uploading'), _classNames));\n        icon = /*#__PURE__*/React.createElement(\"div\", {\n          className: uploadingClassName\n        }, iconNode);\n      } else {\n        var _classNames2;\n\n        var thumbnail = isImgUrl && isImgUrl(file) ? /*#__PURE__*/React.createElement(\"img\", {\n          src: file.thumbUrl || file.url,\n          alt: file.name,\n          className: \"\".concat(prefixCls, \"-list-item-image\")\n        }) : iconNode;\n        var aClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-list-item-thumbnail\"), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-list-item-file\"), isImgUrl && !isImgUrl(file)), _classNames2));\n        icon = /*#__PURE__*/React.createElement(\"a\", {\n          className: aClassName,\n          onClick: function onClick(e) {\n            return handlePreview(file, e);\n          },\n          href: file.url || file.thumbUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, thumbnail);\n      }\n    }\n\n    if (file.status === 'uploading') {\n      // show loading icon if upload progress listener is disabled\n      var loadingProgress = 'percent' in file ? /*#__PURE__*/React.createElement(Progress, _extends({}, progressProps, {\n        type: \"line\",\n        percent: file.percent\n      })) : null;\n      progress = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-list-item-progress\"),\n        key: \"progress\"\n      }, loadingProgress);\n    }\n\n    var infoUploadingClass = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-list-item\"), true), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-list-item-\").concat(file.status), true), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-list-item-list-type-\").concat(listType), true), _classNames3));\n    var linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;\n    var removeIcon = showRemoveIcon ? handleActionIconRender(customRemoveIcon || /*#__PURE__*/React.createElement(DeleteOutlined, null), function () {\n      return handleClose(file);\n    }, prefixCls, locale.removeFile) : null;\n    var downloadIcon = showDownloadIcon && file.status === 'done' ? handleActionIconRender(customDownloadIcon || /*#__PURE__*/React.createElement(DownloadOutlined, null), function () {\n      return handleDownload(file);\n    }, prefixCls, locale.downloadFile) : null;\n    var downloadOrDelete = listType !== 'picture-card' && /*#__PURE__*/React.createElement(\"span\", {\n      key: \"download-delete\",\n      className: \"\".concat(prefixCls, \"-list-item-card-actions \").concat(listType === 'picture' ? 'picture' : '')\n    }, downloadIcon, removeIcon);\n    var listItemNameClass = classNames((_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-list-item-name\"), true), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-list-item-name-icon-count-\").concat([downloadIcon, removeIcon].filter(function (x) {\n      return x;\n    }).length), true), _classNames4));\n    var preview = file.url ? [/*#__PURE__*/React.createElement(\"a\", _extends({\n      key: \"view\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      className: listItemNameClass,\n      title: file.name\n    }, linkProps, {\n      href: file.url,\n      onClick: function onClick(e) {\n        return handlePreview(file, e);\n      }\n    }), file.name), downloadOrDelete] : [/*#__PURE__*/React.createElement(\"span\", {\n      key: \"view\",\n      className: listItemNameClass,\n      onClick: function onClick(e) {\n        return handlePreview(file, e);\n      },\n      title: file.name\n    }, file.name), downloadOrDelete];\n    var style = {\n      pointerEvents: 'none',\n      opacity: 0.5\n    };\n    var previewIcon = showPreviewIcon ? /*#__PURE__*/React.createElement(\"a\", {\n      href: file.url || file.thumbUrl,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      style: file.url || file.thumbUrl ? undefined : style,\n      onClick: function onClick(e) {\n        return handlePreview(file, e);\n      },\n      title: locale.previewFile\n    }, /*#__PURE__*/React.createElement(EyeOutlined, null)) : null;\n    var actions = listType === 'picture-card' && file.status !== 'uploading' && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-list-item-actions\")\n    }, previewIcon, file.status === 'done' && downloadIcon, removeIcon);\n    var message;\n\n    if (file.response && typeof file.response === 'string') {\n      message = file.response;\n    } else {\n      message = file.error && file.error.statusText || locale.uploadError;\n    }\n\n    var iconAndPreview = /*#__PURE__*/React.createElement(\"span\", null, icon, preview);\n    var dom = /*#__PURE__*/React.createElement(\"div\", {\n      className: infoUploadingClass\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-list-item-info\")\n    }, iconAndPreview), actions, /*#__PURE__*/React.createElement(Animate, {\n      transitionName: \"fade\",\n      component: \"\"\n    }, progress));\n    var listContainerNameClass = classNames(_defineProperty({}, \"\".concat(prefixCls, \"-list-picture-card-container\"), listType === 'picture-card'));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: file.uid,\n      className: listContainerNameClass\n    }, file.status === 'error' ? /*#__PURE__*/React.createElement(Tooltip, {\n      title: message,\n      getPopupContainer: function getPopupContainer(node) {\n        return node.parentNode;\n      }\n    }, dom) : /*#__PURE__*/React.createElement(\"span\", null, dom));\n  });\n  var listClassNames = classNames((_classNames6 = {}, _defineProperty(_classNames6, \"\".concat(prefixCls, \"-list\"), true), _defineProperty(_classNames6, \"\".concat(prefixCls, \"-list-\").concat(listType), true), _defineProperty(_classNames6, \"\".concat(prefixCls, \"-list-rtl\"), direction === 'rtl'), _classNames6));\n  var animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate';\n  var transitionName = list.length === 0 ? '' : \"\".concat(prefixCls, \"-\").concat(animationDirection);\n  return /*#__PURE__*/React.createElement(Animate, {\n    transitionName: transitionName,\n    component: \"div\",\n    className: listClassNames\n  }, list, /*#__PURE__*/React.isValidElement(appendAction) ? /*#__PURE__*/React.cloneElement(appendAction, {\n    key: 'appendAction'\n  }) : appendAction);\n};\n\nvar UploadList = /*#__PURE__*/React.forwardRef(InternalUploadList);\nUploadList.displayName = 'UploadList';\nUploadList.defaultProps = {\n  listType: 'text',\n  progress: {\n    strokeWidth: 2,\n    showInfo: false\n  },\n  showRemoveIcon: true,\n  showDownloadIcon: false,\n  showPreviewIcon: true,\n  previewFile: previewImage,\n  isImageUrl: isImageUrl\n};\nexport default UploadList;","map":null,"metadata":{},"sourceType":"module"}