{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Item } from 'rc-menu';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport classNames from 'classnames';\nimport MenuContext from './MenuContext';\nimport Tooltip from '../tooltip';\nimport { SiderContext } from '../layout/Sider';\nimport { isValidElement } from '../_util/reactNode';\n\nvar MenuItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  var _super = _createSuper(MenuItem);\n\n  function MenuItem() {\n    var _this;\n\n    _classCallCheck(this, MenuItem);\n\n    _this = _super.apply(this, arguments);\n\n    _this.renderItem = function (_ref) {\n      var siderCollapsed = _ref.siderCollapsed;\n      var _this$props = _this.props,\n          level = _this$props.level,\n          className = _this$props.className,\n          children = _this$props.children,\n          rootPrefixCls = _this$props.rootPrefixCls;\n\n      var _a = _this.props,\n          title = _a.title,\n          icon = _a.icon,\n          danger = _a.danger,\n          rest = __rest(_a, [\"title\", \"icon\", \"danger\"]);\n\n      return /*#__PURE__*/React.createElement(MenuContext.Consumer, null, function (_ref2) {\n        var _classNames;\n\n        var inlineCollapsed = _ref2.inlineCollapsed,\n            direction = _ref2.direction;\n        var tooltipTitle = title;\n\n        if (typeof title === 'undefined') {\n          tooltipTitle = level === 1 ? children : '';\n        } else if (title === false) {\n          tooltipTitle = '';\n        }\n\n        var tooltipProps = {\n          title: tooltipTitle\n        };\n\n        if (!siderCollapsed && !inlineCollapsed) {\n          tooltipProps.title = null; // Reset `visible` to fix control mode tooltip display not correct\n          // ref: https://github.com/ant-design/ant-design/issues/16742\n\n          tooltipProps.visible = false;\n        }\n\n        var childrenLength = toArray(children).length;\n        return /*#__PURE__*/React.createElement(Tooltip, _extends({}, tooltipProps, {\n          placement: direction === 'rtl' ? 'left' : 'right',\n          overlayClassName: \"\".concat(rootPrefixCls, \"-inline-collapsed-tooltip\")\n        }), /*#__PURE__*/React.createElement(Item, _extends({}, rest, {\n          className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(rootPrefixCls, \"-item-danger\"), danger), _defineProperty(_classNames, \"\".concat(rootPrefixCls, \"-item-only-child\"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames)),\n          title: title\n        }), icon, _this.renderItemChildren(inlineCollapsed)));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MenuItem, [{\n    key: \"renderItemChildren\",\n    value: function renderItemChildren(inlineCollapsed) {\n      var _this$props2 = this.props,\n          icon = _this$props2.icon,\n          children = _this$props2.children,\n          level = _this$props2.level,\n          rootPrefixCls = _this$props2.rootPrefixCls; // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span\n      // ref: https://github.com/ant-design/ant-design/pull/23456\n\n      if (!icon || isValidElement(children) && children.type === 'span') {\n        if (children && inlineCollapsed && level === 1 && typeof children === 'string') {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"\".concat(rootPrefixCls, \"-inline-collapsed-noicon\")\n          }, children.charAt(0));\n        }\n\n        return children;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", null, children);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, this.renderItem);\n    }\n  }]);\n\n  return MenuItem;\n}(React.Component);\n\nexport { MenuItem as default };\nMenuItem.isMenuItem = true;","map":null,"metadata":{},"sourceType":"module"}