{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\n\nfunction useCombinedRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  var targetRef = React.useRef();\n  React.useEffect(function () {\n    refs.forEach(function (ref) {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(targetRef.current);\n      } else {\n        ref.current = targetRef.current;\n      }\n    });\n  }, [refs]);\n  return targetRef;\n}\n\nvar SliderTooltip = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var visible = props.visible;\n  var innerRef = React.useRef(null);\n  var tooltipRef = useCombinedRefs(ref, innerRef);\n  var rafRef = React.useRef(null);\n\n  function cancelKeepAlign() {\n    window.cancelAnimationFrame(rafRef.current);\n    rafRef.current = null;\n  }\n\n  function keepAlign() {\n    if (rafRef.current !== null) {\n      return;\n    }\n\n    rafRef.current = window.requestAnimationFrame(function () {\n      tooltipRef.current.forcePopupAlign();\n      rafRef.current = null;\n      keepAlign();\n    });\n  }\n\n  React.useEffect(function () {\n    if (visible) {\n      keepAlign();\n    } else {\n      cancelKeepAlign();\n    }\n\n    return cancelKeepAlign;\n  }, [visible]);\n  return /*#__PURE__*/React.createElement(Tooltip, _extends({\n    ref: tooltipRef\n  }, props));\n});\nexport default SliderTooltip;","map":null,"metadata":{},"sourceType":"module"}