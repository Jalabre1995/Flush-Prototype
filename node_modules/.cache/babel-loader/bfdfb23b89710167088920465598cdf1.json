{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* eslint react/prop-types: 0 */\n\n\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useTransitionDuration, defaultProps } from './common';\nvar gradientSeed = 0;\n\nfunction stripPercentToNumber(percent) {\n  return +percent.replace('%', '');\n}\n\nfunction toArray(symArray) {\n  return Array.isArray(symArray) ? symArray : [symArray];\n}\n\nfunction getPathStyles(offset, percent, strokeColor, strokeWidth) {\n  var gapDegree = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var gapPosition = arguments.length > 5 ? arguments[5] : undefined;\n  var radius = 50 - strokeWidth / 2;\n  var beginPositionX = 0;\n  var beginPositionY = -radius;\n  var endPositionX = 0;\n  var endPositionY = -2 * radius;\n\n  switch (gapPosition) {\n    case 'left':\n      beginPositionX = -radius;\n      beginPositionY = 0;\n      endPositionX = 2 * radius;\n      endPositionY = 0;\n      break;\n\n    case 'right':\n      beginPositionX = radius;\n      beginPositionY = 0;\n      endPositionX = -2 * radius;\n      endPositionY = 0;\n      break;\n\n    case 'bottom':\n      beginPositionY = radius;\n      endPositionY = 2 * radius;\n      break;\n\n    default:\n  }\n\n  var pathString = \"M 50,50 m \".concat(beginPositionX, \",\").concat(beginPositionY, \"\\n   a \").concat(radius, \",\").concat(radius, \" 0 1 1 \").concat(endPositionX, \",\").concat(-endPositionY, \"\\n   a \").concat(radius, \",\").concat(radius, \" 0 1 1 \").concat(-endPositionX, \",\").concat(endPositionY);\n  var len = Math.PI * 2 * radius;\n  var pathStyle = {\n    stroke: strokeColor,\n    strokeDasharray: \"\".concat(percent / 100 * (len - gapDegree), \"px \").concat(len, \"px\"),\n    strokeDashoffset: \"-\".concat(gapDegree / 2 + offset / 100 * (len - gapDegree), \"px\"),\n    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s' // eslint-disable-line\n\n  };\n  return {\n    pathString: pathString,\n    pathStyle: pathStyle\n  };\n}\n\nvar Circle = function Circle(_ref) {\n  var prefixCls = _ref.prefixCls,\n      strokeWidth = _ref.strokeWidth,\n      trailWidth = _ref.trailWidth,\n      gapDegree = _ref.gapDegree,\n      gapPosition = _ref.gapPosition,\n      trailColor = _ref.trailColor,\n      strokeLinecap = _ref.strokeLinecap,\n      style = _ref.style,\n      className = _ref.className,\n      strokeColor = _ref.strokeColor,\n      percent = _ref.percent,\n      restProps = _objectWithoutProperties(_ref, [\"prefixCls\", \"strokeWidth\", \"trailWidth\", \"gapDegree\", \"gapPosition\", \"trailColor\", \"strokeLinecap\", \"style\", \"className\", \"strokeColor\", \"percent\"]);\n\n  var gradientId = useMemo(function () {\n    gradientSeed += 1;\n    return gradientSeed;\n  }, []);\n\n  var _getPathStyles = getPathStyles(0, 100, trailColor, strokeWidth, gapDegree, gapPosition),\n      pathString = _getPathStyles.pathString,\n      pathStyle = _getPathStyles.pathStyle;\n\n  var percentList = toArray(percent);\n  var strokeColorList = toArray(strokeColor);\n  var gradient = strokeColorList.find(function (color) {\n    return Object.prototype.toString.call(color) === '[object Object]';\n  });\n\n  var _useTransitionDuratio = useTransitionDuration(percentList),\n      _useTransitionDuratio2 = _slicedToArray(_useTransitionDuratio, 1),\n      paths = _useTransitionDuratio2[0];\n\n  var getStokeList = function getStokeList() {\n    var stackPtg = 0;\n    return percentList.map(function (ptg, index) {\n      var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];\n      var stroke = Object.prototype.toString.call(color) === '[object Object]' ? \"url(#\".concat(prefixCls, \"-gradient-\").concat(gradientId, \")\") : '';\n      var pathStyles = getPathStyles(stackPtg, ptg, color, strokeWidth, gapDegree, gapPosition);\n      stackPtg += ptg;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        key: index,\n        className: \"\".concat(prefixCls, \"-circle-path\"),\n        d: pathStyles.pathString,\n        stroke: stroke,\n        strokeLinecap: strokeLinecap,\n        strokeWidth: strokeWidth,\n        opacity: ptg === 0 ? 0 : 1,\n        fillOpacity: \"0\",\n        style: pathStyles.pathStyle,\n        ref: paths[index]\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: classNames(\"\".concat(prefixCls, \"-circle\"), className),\n    viewBox: \"0 0 100 100\",\n    style: style\n  }, restProps), gradient && /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"\".concat(prefixCls, \"-gradient-\").concat(gradientId),\n    x1: \"100%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"0%\"\n  }, Object.keys(gradient).sort(function (a, b) {\n    return stripPercentToNumber(a) - stripPercentToNumber(b);\n  }).map(function (key, index) {\n    return /*#__PURE__*/React.createElement(\"stop\", {\n      key: index,\n      offset: key,\n      stopColor: gradient[key]\n    });\n  }))), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"\".concat(prefixCls, \"-circle-trail\"),\n    d: pathString,\n    stroke: trailColor,\n    strokeLinecap: strokeLinecap,\n    strokeWidth: trailWidth || strokeWidth,\n    fillOpacity: \"0\",\n    style: pathStyle\n  }), getStokeList().reverse());\n};\n\nCircle.defaultProps = defaultProps;\nexport default Circle;","map":null,"metadata":{},"sourceType":"module"}