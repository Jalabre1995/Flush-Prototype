{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Animate from 'rc-animate';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport Ribbon from './Ribbon';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport { isPresetColor } from './utils';\n\nvar Badge = function Badge(_a) {\n  var _classNames2, _classNames3;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeScrollNumberPrefixCls = _a.scrollNumberPrefixCls,\n      children = _a.children,\n      status = _a.status,\n      text = _a.text,\n      color = _a.color,\n      _a$count = _a.count,\n      count = _a$count === void 0 ? null : _a$count,\n      _a$overflowCount = _a.overflowCount,\n      overflowCount = _a$overflowCount === void 0 ? 99 : _a$overflowCount,\n      _a$dot = _a.dot,\n      dot = _a$dot === void 0 ? false : _a$dot,\n      _a$size = _a.size,\n      size = _a$size === void 0 ? 'default' : _a$size,\n      title = _a.title,\n      offset = _a.offset,\n      style = _a.style,\n      className = _a.className,\n      _a$showZero = _a.showZero,\n      showZero = _a$showZero === void 0 ? false : _a$showZero,\n      restProps = __rest(_a, [\"prefixCls\", \"scrollNumberPrefixCls\", \"children\", \"status\", \"text\", \"color\", \"count\", \"overflowCount\", \"dot\", \"size\", \"title\", \"offset\", \"style\", \"className\", \"showZero\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('badge', customizePrefixCls);\n\n  var getNumberedDisplayCount = function getNumberedDisplayCount() {\n    var displayCount = count > overflowCount ? \"\".concat(overflowCount, \"+\") : count;\n    return displayCount;\n  };\n\n  var hasStatus = function hasStatus() {\n    return status !== null && status !== undefined || color !== null && color !== undefined;\n  };\n\n  var isZero = function isZero() {\n    var numberedDisplayCount = getNumberedDisplayCount();\n    return numberedDisplayCount === '0' || numberedDisplayCount === 0;\n  };\n\n  var isDot = function isDot() {\n    return dot && !isZero() || hasStatus();\n  };\n\n  var getDisplayCount = function getDisplayCount() {\n    // dot mode don't need count\n    if (isDot()) {\n      return '';\n    }\n\n    return getNumberedDisplayCount();\n  };\n\n  var getScrollNumberTitle = function getScrollNumberTitle() {\n    if (title) {\n      return title;\n    }\n\n    return typeof count === 'string' || typeof count === 'number' ? count : undefined;\n  };\n\n  var getStyleWithOffset = function getStyleWithOffset() {\n    if (direction === 'rtl') {\n      return offset ? _extends({\n        left: parseInt(offset[0], 10),\n        marginTop: offset[1]\n      }, style) : style;\n    }\n\n    return offset ? _extends({\n      right: -parseInt(offset[0], 10),\n      marginTop: offset[1]\n    }, style) : style;\n  };\n\n  var isHidden = function isHidden() {\n    var displayCount = getDisplayCount();\n    var isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\n    return (isEmpty || isZero() && !showZero) && !isDot();\n  };\n\n  var renderStatusText = function renderStatusText() {\n    var hidden = isHidden();\n    return hidden || !text ? null : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-status-text\")\n    }, text);\n  };\n\n  var renderDisplayComponent = function renderDisplayComponent() {\n    var customNode = count;\n\n    if (!customNode || _typeof(customNode) !== 'object') {\n      return undefined;\n    }\n\n    return cloneElement(customNode, {\n      style: _extends(_extends({}, getStyleWithOffset()), customNode.props && customNode.props.style)\n    });\n  };\n\n  var renderBadgeNumber = function renderBadgeNumber() {\n    var _classNames;\n\n    var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);\n    var displayCount = getDisplayCount();\n    var bDot = isDot();\n    var hidden = isHidden();\n    var scrollNumberCls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-dot\"), bDot), _defineProperty(_classNames, \"\".concat(prefixCls, \"-count\"), !bDot), _defineProperty(_classNames, \"\".concat(prefixCls, \"-count-sm\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-multiple-words\"), !bDot && count && count.toString && count.toString().length > 1), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames));\n    var statusStyle = getStyleWithOffset();\n\n    if (color && !isPresetColor(color)) {\n      statusStyle = statusStyle || {};\n      statusStyle.background = color;\n    }\n\n    return hidden ? null : /*#__PURE__*/React.createElement(ScrollNumber, {\n      prefixCls: scrollNumberPrefixCls,\n      \"data-show\": !hidden,\n      className: scrollNumberCls,\n      count: displayCount,\n      displayComponent: renderDisplayComponent() // <Badge status=\"success\" count={<Icon type=\"xxx\" />}></Badge>\n      ,\n      title: getScrollNumberTitle(),\n      style: statusStyle,\n      key: \"scrollNumber\"\n    });\n  };\n\n  var statusCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status-dot\"), hasStatus()), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames2));\n  var statusStyle = {};\n\n  if (color && !isPresetColor(color)) {\n    statusStyle.background = color;\n  }\n\n  var badgeClassName = classNames(className, prefixCls, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status\"), hasStatus()), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-not-a-wrapper\"), !children), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames3)); // <Badge status=\"success\" />\n\n  if (!children && hasStatus()) {\n    var styleWithOffset = getStyleWithOffset();\n    var statusTextColor = styleWithOffset && styleWithOffset.color;\n    return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n      className: badgeClassName,\n      style: styleWithOffset\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: statusCls,\n      style: statusStyle\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: statusTextColor\n      },\n      className: \"\".concat(prefixCls, \"-status-text\")\n    }, text));\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n    className: badgeClassName\n  }), children, /*#__PURE__*/React.createElement(Animate, {\n    component: \"\",\n    showProp: \"data-show\",\n    transitionName: children ? \"\".concat(prefixCls, \"-zoom\") : '',\n    transitionAppear: true\n  }, renderBadgeNumber()), renderStatusText());\n};\n\nBadge.Ribbon = Ribbon;\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}